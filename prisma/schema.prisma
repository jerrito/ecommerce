// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// schema.prisma
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role{
  ADMIN
  USER
}

enum orderEventStatus{
  PENDING
  ACCEPTED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}
model User{
  id Int @id @default(autoincrement())
   userName String 
   email String @unique
   password String 
   defaultBillingAddressId Int?
   defaultShippingAddressId Int?
   role Role @default(USER)
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
   address Address[]
   cart Cart[]
   order Order[]
   @@map("Users")
   
}


model Address{
  id Int @id @default(autoincrement())
   formattedddress String 
   lat Decimal 
   lng Decimal 
   city String? 
   country String? 
   pinCode String? 
   userId Int
   user User @relation(fields: [userId],references: [id])
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt  
   @@map("Address")
}

model Products{
  id Int @id @default(autoincrement())
  name String 
  description String 
  price Decimal 
  tag String 
  createsAt DateTime  @default(now())
  updateAt DateTime @updatedAt
  cart Cart[]
  orders OrderProducts[] 
  @@map("products")
  
}


model Cart{
  id Int @id @default(autoincrement())
  quantity Int
  userId Int
  user User @relation(fields: [userId],references: [id])
  productId Int
  product Products @relation(fields: [productId],references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime @updatedAt
  @@map("cart")
}

model Order{
  id Int @id @default(autoincrement())
  quantity Int
  userId Int
  netAmount Decimal
  address String
  status orderEventStatus @default(PENDING)
  user User @relation(fields: [userId],references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime @updatedAt
  product OrderProducts[]
  orderEvent OrderEvent[]
  @@map("order")
}

model OrderProducts{
  id Int @id @default(autoincrement())
  quantity Int
  orderId Int
  netAmount Decimal
  address String
  order Order @relation(fields: [orderId],references: [id])
   productId Int
  product Products @relation(fields: [productId],references: [id])
 createdAt DateTime  @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("order_product")
}

model OrderEvent{

  id Int @id @default(autoincrement())
  orderId Int
  order Order @relation(fields: [orderId],references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime @updatedAt
  status orderEventStatus @default(PENDING)
  @@map("order_event")
}